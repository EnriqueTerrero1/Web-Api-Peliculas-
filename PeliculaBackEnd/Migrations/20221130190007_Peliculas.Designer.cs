// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using PeliculaBackEnd;

#nullable disable

namespace PeliculaBackEnd.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221130190007_Peliculas")]
    partial class Peliculas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("biografia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.ToTable("Actores");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Cine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Point>("ubicacion")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.HasKey("id");

                    b.ToTable("Cines");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Genero", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Pelicula", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("FechaLanzamiento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("enCines")
                        .HasColumnType("bit");

                    b.Property<string>("poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resumen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("trailer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("peliculas");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.PeliculasActores", b =>
                {
                    b.Property<int>("actorId")
                        .HasColumnType("int");

                    b.Property<int>("peliculaId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("personaje")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("actorId", "peliculaId");

                    b.HasIndex("peliculaId");

                    b.ToTable("peliculasActores");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.PeliculasCines", b =>
                {
                    b.Property<int>("cineId")
                        .HasColumnType("int");

                    b.Property<int>("peliculaId")
                        .HasColumnType("int");

                    b.HasKey("cineId", "peliculaId");

                    b.HasIndex("peliculaId");

                    b.ToTable("peliculasCines");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.PeliculasGeneros", b =>
                {
                    b.Property<int>("generoId")
                        .HasColumnType("int");

                    b.Property<int>("peliculaId")
                        .HasColumnType("int");

                    b.HasKey("generoId", "peliculaId");

                    b.HasIndex("peliculaId");

                    b.ToTable("peliculasGeneros");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.PeliculasActores", b =>
                {
                    b.HasOne("PeliculaBackEnd.Entidades.Actor", "actor")
                        .WithMany("peliculasActores")
                        .HasForeignKey("actorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeliculaBackEnd.Entidades.Pelicula", "pelicula")
                        .WithMany("peliculasActores")
                        .HasForeignKey("peliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actor");

                    b.Navigation("pelicula");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.PeliculasCines", b =>
                {
                    b.HasOne("PeliculaBackEnd.Entidades.Cine", "cine")
                        .WithMany("peliculasCines")
                        .HasForeignKey("cineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeliculaBackEnd.Entidades.Pelicula", "Pelicula")
                        .WithMany("peliculasCines")
                        .HasForeignKey("peliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelicula");

                    b.Navigation("cine");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.PeliculasGeneros", b =>
                {
                    b.HasOne("PeliculaBackEnd.Entidades.Genero", "genero")
                        .WithMany("peliculasGeneros")
                        .HasForeignKey("generoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeliculaBackEnd.Entidades.Pelicula", "pelicula")
                        .WithMany("peliculasGeneros")
                        .HasForeignKey("peliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genero");

                    b.Navigation("pelicula");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Actor", b =>
                {
                    b.Navigation("peliculasActores");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Cine", b =>
                {
                    b.Navigation("peliculasCines");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Genero", b =>
                {
                    b.Navigation("peliculasGeneros");
                });

            modelBuilder.Entity("PeliculaBackEnd.Entidades.Pelicula", b =>
                {
                    b.Navigation("peliculasActores");

                    b.Navigation("peliculasCines");

                    b.Navigation("peliculasGeneros");
                });
#pragma warning restore 612, 618
        }
    }
}
